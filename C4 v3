Slide 2 → “How it Works” (Architecture + Training Flow)

This is a Container-level C4 diagram showing:

Users → AI Plugin (CongniAiOps) → Enterprise Apps

Training lifecycle loop (user action interceptor → RAG → fine-tuning → promotion → runtime)


@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_LEFT_RIGHT()

Person(user, "End User", "Performs tasks in enterprise apps")
System_Boundary(apps, "Enterprise Applications") {
  Container(app1, "KYC App", "Java/Angular", "Compliance workflows")
  Container(app2, "AML App", "Python", "Transaction monitoring")
  Container(app3, "Fraud Detection App", "Java", "Fraud case investigation")
}

System_Boundary(ai, "CongniAiOps AI Plugin") {
  Container(plugin, "AI Plugin Layer", "SDK/Library", "Abstract AI interface inside each app")
  Container(rag, "RAG Corpus", "Vector DB", "Policies, SOPs, past cases, media feeds")
  Container(policy, "Governance Engine", "Service", "RBAC, audit, PII masking")
  Container(orchestrator, "AI Orchestrator", "Service", "Natural language → API orchestration")
}

System_Boundary(train, "Training Lifecycle") {
  Container(intercept, "User Action Interceptor", "Middleware", "Captures workflows (UI/API)")
  Container(ftprep, "Training Data Builder", "Jobs", "Curates prompt/response pairs")
  Container(ft, "Fine-tuning/Adapters", "Jobs", "Domain adapters (KYC/AML/Fraud)")
  Container(eval, "Eval & Safety Gates", "Service", "Benchmarks, red-team")
  Container(reg, "Model Registry", "Service", "Versioned models")
  Container(mcp, "MCP", "Service", "Promotion/rollback")
}

Rel(user, app1, "Works in")
Rel(user, app2, "Works in")
Rel(user, app3, "Works in")

Rel(app1, plugin, "Invokes AI plugin")
Rel(app2, plugin, "Invokes AI plugin")
Rel(app3, plugin, "Invokes AI plugin")

Rel(plugin, orchestrator, "Delegates tasks")
Rel(orchestrator, rag, "Retrieve context")
Rel(orchestrator, policy, "Check policies")
Rel(orchestrator, app1, "Call APIs securely")
Rel(orchestrator, app2, "Call APIs securely")
Rel(orchestrator, app3, "Call APIs securely")

Rel(intercept, ftprep, "Convert user actions to training data")
Rel(ftprep, ft, "Curated datasets")
Rel(ft, eval, "Candidate models")
Rel(eval, reg, "Register model if pass")
Rel(reg, mcp, "Push to MCP")
Rel(mcp, orchestrator, "Deploy new model version")
@enduml


---

Slide 3 → “What Next” (Phased Implementation Roadmap)

For roadmap, a C4 Deployment diagram is better, showing Phase 1 → Phase 2 → Phase 3.
This way stakeholders see how it will scale.
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml
LAYOUT_LEFT_RIGHT()

Deployment_Node(bank, "Bank Infrastructure", "On-Prem + Cloud (OpenShift)") {

  ' Phase 1: Pilot
  Deployment_Node(phase1, "Phase 1: Pilot (Compliance Division)", "KYC + AML") {
    Container(kyc, "KYC App", "Java/Angular", "Existing compliance workflows")
    Container(aml, "AML App", "Python", "Transaction monitoring")
    Container(plugin1, "CongniAiOps Plugin", "SDK/Library", "Abstract AI layer embedded in apps")
  }

  ' Phase 2: Scale
  Deployment_Node(phase2, "Phase 2: Scale (Add Fraud, Other Apps)", "Compliance + Fraud") {
    Container(fraud, "Fraud Detection App", "Java", "Fraud case investigation")
    Container(plugin2, "CongniAiOps Plugin", "SDK/Library", "Extended AI layer")
    Container(sharedRag, "Shared RAG Corpus", "Vector DB", "Policies, SOPs, past cases, media feeds")
    Container(policy, "Central Policy Engine", "Service", "RBAC, DLP, audit enforcement")
  }

  ' Phase 3: Enterprise Rollout
  Deployment_Node(phase3, "Phase 3: Enterprise Rollout", "Full Bank") {
    Container(mcp, "Model Control Plane (MCP)", "Service", "Manages versions, rollout, rollback")
    Container(fed, "Federated Agent Layer", "Service", "Coordinates multi-agent across apps")
    Container(obs, "Observability & Audit", "Service", "Runtime metrics, compliance reporting")
  }
}

' Relationships
Rel(user, kyc, "Works with")
Rel(user, aml, "Works with")
Rel(user, fraud, "Works with")

Rel(kyc, plugin1, "Delegates AI tasks")
Rel(aml, plugin1, "Delegates AI tasks")
Rel(fraud, plugin2, "Delegates AI tasks")

Rel(plugin1, sharedRag, "Read/write embeddings")
Rel(plugin2, sharedRag, "Read/write embeddings")
Rel(sharedRag, policy, "Policy enforcement")

Rel(mcp, plugin1, "Deploy/promote models")
Rel(mcp, plugin2, "Deploy/promote models")
Rel(fed, mcp, "Coordinate model/agents across apps")
Rel(obs, fed, "Monitors KPIs, risks")
@enduml


@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_LEFT_RIGHT()

' ------------------
' Actors
' ------------------
Person(user, "End User", "Interacts via NL prompts & enterprise apps")
Person(sme, "Risk Analysts / Control Officers", "Provide labels, corrections, policy updates")
Person(mle, "MLE / Data Scientist", "Owns training/eval pipelines")

' ------------------
' CongniAiOps Runtime (Prompt-based flow)
' ------------------
System_Boundary(ai, "CongniAiOps Runtime") {
  Container(promptUI, "Prompt Interface", "Chat/Command UI", "Accepts NL instructions from users")
  Container(orchestrator, "AI Orchestrator", "Service", "NL → API orchestration, LangGraph")
  Container(plugin, "AI Plugin Layer", "SDK/Library", "Abstract AI interface inside each app")
  Container(rag, "RAG Corpus", "Vector DB", "Policies, SOPs, past cases, risk frameworks")
  Container(policy, "Governance Engine", "Service", "RBAC, audit, DLP, PII masking")
}

System_Boundary(apps, "Enterprise Risk & Control Applications") {
  Container(app1, "Risk Assessment App", "Java/Angular", "Market/Credit/Operational risk scoring")
  Container(app2, "Internal Controls App", "Java", "SOX controls & internal audits")
  Container(app3, "Regulatory Reporting App", "Python", "Generate & file regulatory reports")
  Container(app4, "Audit Management App", "Java/Angular", "Plan, track & close audits")
  Container(app5, "Incident & Issue Tracking App", "Python", "Log issues, monitor corrective actions")
}

' ------------------
' Training & Knowledge Lifecycle (Action Interception)
' ------------------
System_Boundary(train, "Training Lifecycle") {
  Container(intercept, "User Action Interceptor", "Middleware", "Captures enterprise app events (UI/API actions)")
  Container(ftprep, "Training Data Builder", "Jobs", "Curates prompt/response pairs (from traces + SMEs)")
  Container(ft, "Fine-tuning / Adapters", "Jobs", "LoRA/Adapters for Risk & Control domains")
  Container(eval, "Evaluation & Safety Gates", "Service", "Benchmarks, red-team, regression tests")
  Container(reg, "Model Registry", "Service", "Versioned models")
  Container(mcp, "MCP (Promotion Controller)", "Service", "Canary, A/B, rollback")
}

' ------------------
' External Data Sources
' ------------------
Container(srcPolicies, "Policies & Risk Frameworks", "Docs/Repos", "Risk policies, control libraries, SOPs")
Container(srcCases, "Audit & Risk Case Notes", "Case DB", "Historical audit/risk findings (PII governed)")
Container(srcEvents, "Event/API Logs", "Data Lake", "Tool calls, transactions, outcomes (governed)")
Container(srcMedia, "Regulatory/Adverse Feeds", "Feeds", "Regulatory updates, industry alerts, sanctions lists")

Container(ingest, "RAG Ingestion Pipeline", "Jobs", "Chunk → enrich → embed → index")
ContainerDb(vecdb, "Vector DB (RAG Corpus)", "DB", "Embeddings + metadata + citations")
Container(obs, "Observability", "Service", "Quality, latency, cost dashboards")

' ------------------
' Relationships: Runtime Flow
' ------------------
Rel(user, promptUI, "Sends NL prompts")
Rel(promptUI, orchestrator, "Forward commands")
Rel(orchestrator, rag, "Retrieve context")
Rel(orchestrator, policy, "Check RBAC & DLP")
Rel(orchestrator, plugin, "Call into plugins")

Rel(plugin, app1, "Invoke APIs securely")
Rel(plugin, app2, "Invoke APIs securely")
Rel(plugin, app3, "Invoke APIs securely")
Rel(plugin, app4, "Invoke APIs securely")
Rel(plugin, app5, "Invoke APIs securely")

' ------------------
' Relationships: Training Flow
' ------------------
Rel(user, app1, "Logs in & performs actions")
Rel(user, app2, "Logs in & performs actions")
Rel(user, app3, "Logs in & performs actions")
Rel(user, app4, "Logs in & performs actions")
Rel(user, app5, "Logs in & performs actions")

Rel(app1, intercept, "Intercept events")
Rel(app2, intercept, "Intercept events")
Rel(app3, intercept, "Intercept events")
Rel(app4, intercept, "Intercept events")
Rel(app5, intercept, "Intercept events")

Rel(intercept, ftprep, "Convert actions → training data")
Rel(sme, ftprep, "Label & correct data")

Rel(srcPolicies, ingest, "Governed docs")
Rel(srcCases, ingest, "Historical audit/risk data")
Rel(srcEvents, ingest, "Logs & telemetry")
Rel(srcMedia, ingest, "Regulatory/adverse feeds")

Rel(ingest, vecdb, "Embeddings")
Rel(vecdb, rag, "Context supply")

Rel(ftprep, ft, "Curated datasets")
Rel(ft, eval, "Candidate models")
Rel(eval, reg, "Register if pass gates")
Rel(reg, mcp, "Push new version")
Rel(mcp, orchestrator, "Deploy new model → runtime")

Rel(mle, ft, "Run FT/adapter jobs")
Rel(mle, eval, "Define tests & thresholds")
Rel(obs, ftprep, "Quality signals → retraining")
Rel(policy, ftprep, "Mask PII before training")
Rel(policy, ingest, "Govern ingestion")

SHOW_LEGEND()
@enduml

@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_LEFT_RIGHT()

' ------------------
' Actors
' ------------------
Person(user, "End User", "Prompts tasks in NL (risk/control workflows)")
Person(sme, "Risk Analysts / Control Officers", "Label, correct, update policies")
Person(mle, "MLE / Data Scientist", "Owns training/eval pipelines")

' ------------------
' CongniAiOps Runtime (Agentic AI)
' ------------------
System_Boundary(ai, "CongniAiOps Runtime (Agentic AI)") {
  Container(promptUI, "Prompt Interface", "Chat/Command UI", "Accepts NL instructions")
  Container(orchestrator, "LangGraph Orchestrator", "Graph-based planner", "Plans → selects tools/plugins → executes multi-step workflows")
  Container(plugin, "AI Plugin Layer", "SDK/Library", "Abstract AI interface in each app")
  Container(rag, "RAG Corpus", "Vector DB", "Policies, SOPs, past cases, frameworks")
  Container(policy, "Governance Engine", "Service", "RBAC, DLP, audit guardrails")
}

System_Boundary(apps, "Enterprise Risk & Control Applications") {
  Container(app1, "Risk Assessment App", "Java/Angular", "Market/Credit/Operational risk scoring")
  Container(app2, "Internal Controls App", "Java", "SOX controls & audits")
  Container(app3, "Regulatory Reporting App", "Python", "Generate & file reports")
  Container(app4, "Audit Mgmt App", "Java/Angular", "Plan, track & close audits")
  Container(app5, "Incident Tracking App", "Python", "Issues, corrective actions")
}

' ------------------
' Training & Lifecycle (Continuous Learning)
' ------------------
System_Boundary(train, "Training Lifecycle") {
  Container(intercept, "User Action Interceptor", "Middleware", "Captures app events (UI/API)")
  Container(ftprep, "Training Data Builder", "Jobs", "Curates prompt/response traces + SME corrections")
  Container(ft, "Fine-tuning / Adapters", "Jobs", "LoRA/Adapters for risk/control domains")
  Container(eval, "Eval & Safety Gates", "Service", "Benchmarks, red-team, regression tests")
  Container(reg, "Model Registry", "Service", "Versioned models")
  Container(mcp, "MCP Promotion Controller", "Service", "Canary, A/B, rollback to orchestrator")
}

' ------------------
' External Knowledge
' ------------------
Container(srcPolicies, "Policies & Risk Frameworks", "Docs/Repos", "Risk policies, control libraries, SOPs")
Container(srcCases, "Audit & Risk Notes", "Case DB", "Historical findings (PII governed)")
Container(srcEvents, "Event/API Logs", "Data Lake", "Tool calls, transactions, outcomes")
Container(srcMedia, "Reg/Adverse Feeds", "Feeds", "Regulatory updates, alerts, sanctions lists")

Container(ingest, "RAG Ingestion Pipeline", "Jobs", "Chunk → enrich → embed → index")
ContainerDb(vecdb, "Vector DB", "DB", "Embeddings + metadata + citations")
Container(obs, "Observability", "Service", "Dashboards: quality, latency, cost")

' ------------------
' Runtime Flow (Agentic loop)
' ------------------
Rel(user, promptUI, "Submits NL prompts")
Rel(promptUI, orchestrator, "Send prompt")
Rel(orchestrator, rag, "Retrieve context (RAG)")
Rel(orchestrator, policy, "Check RBAC/DLP")
Rel(orchestrator, plugin, "Select & invoke tool via LangGraph")

Rel(plugin, app1, "Secure API calls")
Rel(plugin, app2, "Secure API calls")
Rel(plugin, app3, "Secure API calls")
Rel(plugin, app4, "Secure API calls")
Rel(plugin, app5, "Secure API calls")

' ------------------
' Training Flow (Intercepted actions → learning)
' ------------------
Rel(user, app1, "Logs in & performs tasks")
Rel(user, app2, "Logs in & performs tasks")
Rel(user, app3, "Logs in & performs tasks")
Rel(user, app4, "Logs in & performs tasks")
Rel(user, app5, "Logs in & performs tasks")

Rel(app1, intercept, "Capture events")
Rel(app2, intercept, "Capture events")
Rel(app3, intercept, "Capture events")
Rel(app4, intercept, "Capture events")
Rel(app5, intercept, "Capture events")

Rel(intercept, ftprep, "Convert to training data")
Rel(sme, ftprep, "Review, correct labels")

Rel(srcPolicies, ingest, "Docs → embeddings")
Rel(srcCases, ingest, "Cases → embeddings")
Rel(srcEvents, ingest, "Logs → embeddings")
Rel(srcMedia, ingest, "Feeds → embeddings")

Rel(ingest, vecdb, "Store embeddings")
Rel(vecdb, rag, "Context retrieval")

Rel(ftprep, ft, "Curated datasets")
Rel(ft, eval, "Candidate models → test")
Rel(eval, reg, "If pass, register")
Rel(reg, mcp, "Push new version")
Rel(mcp, orchestrator, "Deploy/rollback models at runtime")

Rel(mle, ft, "Run FT/adapter jobs")
Rel(mle, eval, "Define thresholds")
Rel(obs, ftprep, "Feedback → retraining")
Rel(policy, ftprep, "Mask PII")
Rel(policy, ingest, "Guard ingestion")

SHOW_LEGEND()
@enduml





@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_TOP_DOWN()

' -------------------
' Actors
' -------------------
Person(riskUser, "Risk Officer", "Uses Risk system manually or via NL prompts")
Person(auditUser, "Auditor", "Uses Audit system manually or via NL prompts")
Person(issueUser, "Issue Manager", "Uses Issue Mgmt system manually or via NL prompts")
Person(manager, "Management", "Pulls insights across systems")

' -------------------
' Enterprise Applications (Box for all 3 apps)
' -------------------
System_Boundary(apps, "Enterprise Risk & Control Applications") {

  ' ---- Risk App ----
  System_Boundary(riskApp, "Risk Assessment System") {
    Container(riskUI, "Risk App UI", "Web", "User interface for risk scoring")
    Container(riskPlugin, "CongniAiOps Plugin", "SDK/Library", "LangGraph orchestration + prompt handling")
    Container(riskModel, "Risk Domain Model", "LLM + Adapters", "Risk-specific AI model")
    Container(riskAPI, "Risk APIs/DB", "Services", "Enterprise APIs & databases")
  }

  Rel(riskUser, riskUI, "Performs actions manually")
  Rel(riskUser, riskPlugin, "Sends NL prompts")
  Rel(riskUI, riskPlugin, "Intercept events → training")
  Rel(riskPlugin, riskModel, "Execute task with context (via LangGraph)")
  Rel(riskModel, riskAPI, "Call Risk APIs / fetch data")
  Rel(riskModel, riskPlugin, "Return structured results")
  Rel(riskPlugin, riskUI, "Show response in NL")

  ' ---- Audit App ----
  System_Boundary(auditApp, "Internal Audit System") {
    Container(auditUI, "Audit App UI", "Web", "Audit workflows")
    Container(auditPlugin, "CongniAiOps Plugin", "SDK/Library", "LangGraph orchestration + prompt handling")
    Container(auditModel, "Audit Domain Model", "LLM + Adapters", "Audit-specific AI model")
    Container(auditAPI, "Audit APIs/DB", "Services", "Enterprise APIs & audit records")
  }

  Rel(auditUser, auditUI, "Performs actions manually")
  Rel(auditUser, auditPlugin, "Sends NL prompts")
  Rel(auditUI, auditPlugin, "Intercept events → training")
  Rel(auditPlugin, auditModel, "Execute task with context (via LangGraph)")
  Rel(auditModel, auditAPI, "Call Audit APIs / fetch data")
  Rel(auditModel, auditPlugin, "Return structured results")
  Rel(auditPlugin, auditUI, "Show response in NL")

  ' ---- Issue Mgmt App ----
  System_Boundary(issueApp, "Issue Mgmt System") {
    Container(issueUI, "Issue App UI", "Web", "Issue logging & corrective actions")
    Container(issuePlugin, "CongniAiOps Plugin", "SDK/Library", "LangGraph orchestration + prompt handling")
    Container(issueModel, "Issue Domain Model", "LLM + Adapters", "Issue-specific AI model")
    Container(issueAPI, "Issue APIs/DB", "Services", "Enterprise APIs & issue database")
  }

  Rel(issueUser, issueUI, "Performs actions manually")
  Rel(issueUser, issuePlugin, "Sends NL prompts")
  Rel(issueUI, issuePlugin, "Intercept events → training")
  Rel(issuePlugin, issueModel, "Execute task with context (via LangGraph)")
  Rel(issueModel, issueAPI, "Call Issue APIs / fetch data")
  Rel(issueModel, issuePlugin, "Return structured results")
  Rel(issuePlugin, issueUI, "Show response in NL")
}

' -------------------
' Federated Layer
' -------------------
System_Boundary(federated, "Federated CongniAiOps Layer") {
  Container(promptUI, "Federated Prompt UI", "Chat/Command UI", "Cross-system natural language query")
  Container(fedOrch, "Federated Orchestrator", "LangGraph", "Coordinates multi-system workflows")
  Container(fedRAG, "Federated RAG Corpus", "Vector DB", "Policies, SOPs, cross-domain knowledge")
}

Rel(manager, promptUI, "Asks cross-system questions")
Rel(promptUI, fedOrch, "Send NL query")
Rel(fedOrch, fedRAG, "Retrieve multi-domain context")
Rel(fedOrch, riskPlugin, "Query risk insights")
Rel(fedOrch, auditPlugin, "Query audit insights")
Rel(fedOrch, issuePlugin, "Query issue insights")

@enduml
